{"mappings":"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","sources":["minigl.js"],"sourcesContent":["function normalizeColor(hexCode) {\n    return [(hexCode >> 16 & 255) / 255, (hexCode >> 8 & 255) / 255, (255 & hexCode) / 255]\n  } [\"SCREEN\", \"LINEAR_LIGHT\"].reduce((hexCode, t, n) => Object.assign(hexCode, {\n    [t]: n\n  }), {});\n  \n  function e(object, propertyName, val) {\n    return propertyName in object ? Object.defineProperty(object, propertyName, {\n      value: val,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : object[propertyName] = val, object\n  }\n  \n  class MiniGl {\n    constructor(canvas, width, height, debug = false) {\n        const _miniGl = this,\n            debug_output = -1 !== document.location.search.toLowerCase().indexOf(\"debug=webgl\");\n        _miniGl.canvas = canvas, _miniGl.gl = _miniGl.canvas.getContext(\"webgl\", {\n            antialias: true\n        }), _miniGl.meshes = [];\n        const context = _miniGl.gl;\n        width && height && this.setSize(width, height), _miniGl.lastDebugMsg, _miniGl.debug = debug && debug_output ? function(e) {\n            const t = new Date;\n            t - _miniGl.lastDebugMsg > 1e3 && console.log(\"---\"), console.log(t.toLocaleTimeString() + Array(Math.max(0, 32 - e.length)).join(\" \") + e + \": \", ...Array.from(arguments).slice(1)), _miniGl.lastDebugMsg = t\n        } : () => {}, Object.defineProperties(_miniGl, {\n            Material: {\n                enumerable: false,\n                value: class {\n                    constructor(vertexShaders, fragments, uniforms = {}) {\n                        const material = this;\n                        function getShaderByType(type, source) {\n                            const shader = context.createShader(type);\n                            return context.shaderSource(shader, source), context.compileShader(shader), context.getShaderParameter(shader, context.COMPILE_STATUS) || console.error(context.getShaderInfoLog(shader)), _miniGl.debug(\"Material.compileShaderSource\", {\n                                source: source\n                            }), shader\n                        }\n                        function getUniformVariableDeclarations(uniforms, type) {\n                            return Object.entries(uniforms).map(([uniform, value]) => value.getDeclaration(uniform, type)).join(\"\\n\")\n                        }\n                        material.uniforms = uniforms, material.uniformInstances = [];\n  \n                        const prefix = \"\\n              precision highp float;\\n            \";\n                        material.vertexSource = `\\n              ${prefix}\\n              attribute vec4 position;\\n              attribute vec2 uv;\\n              attribute vec2 uvNorm;\\n              ${getUniformVariableDeclarations(_miniGl.commonUniforms,\"vertex\")}\\n              ${getUniformVariableDeclarations(uniforms,\"vertex\")}\\n              ${vertexShaders}\\n            `,\n                        material.Source = `\\n              ${prefix}\\n              ${getUniformVariableDeclarations(_miniGl.commonUniforms,\"fragment\")}\\n              ${getUniformVariableDeclarations(uniforms,\"fragment\")}\\n              ${fragments}\\n            `,\n                        material.vertexShader = getShaderByType(context.VERTEX_SHADER, material.vertexSource),\n                        material.fragmentShader = getShaderByType(context.FRAGMENT_SHADER, material.Source),\n                        material.program = context.createProgram(),\n                        context.attachShader(material.program, material.vertexShader),\n                        context.attachShader(material.program, material.fragmentShader),\n                        context.linkProgram(material.program),\n                        context.getProgramParameter(material.program, context.LINK_STATUS) || console.error(context.getProgramInfoLog(material.program)),\n                        context.useProgram(material.program),\n                        material.attachUniforms(void 0, _miniGl.commonUniforms),\n                        material.attachUniforms(void 0, material.uniforms)\n                    }\n                    //t = uniform\n                    attachUniforms(name, uniforms) {\n                        //n  = material\n                        const material = this;\n                        void 0 === name ? Object.entries(uniforms).forEach(([name, uniform]) => {\n                            material.attachUniforms(name, uniform)\n                        }) : \"array\" == uniforms.type ? uniforms.value.forEach((uniform, i) => material.attachUniforms(`${name}[${i}]`, uniform)) : \"struct\" == uniforms.type ? Object.entries(uniforms.value).forEach(([uniform, i]) => material.attachUniforms(`${name}.${uniform}`, i)) : (_miniGl.debug(\"Material.attachUniforms\", {\n                            name: name,\n                            uniform: uniforms\n                        }), material.uniformInstances.push({\n                            uniform: uniforms,\n                            location: context.getUniformLocation(material.program, name)\n                        }))\n                    }\n                }\n            },\n            Uniform: {\n                enumerable: !1,\n                value: class {\n                    constructor(e) {\n                        this.type = \"float\", Object.assign(this, e);\n                        this.typeFn = {\n                            float: \"1f\",\n                            int: \"1i\",\n                            vec2: \"2fv\",\n                            vec3: \"3fv\",\n                            vec4: \"4fv\",\n                            mat4: \"Matrix4fv\"\n                        } [this.type] || \"1f\", this.update()\n                    }\n                    update(value) {\n                        void 0 !== this.value && context[`uniform${this.typeFn}`](value, 0 === this.typeFn.indexOf(\"Matrix\") ? this.transpose : this.value, 0 === this.typeFn.indexOf(\"Matrix\") ? this.value : null)\n                    }\n                    //e - name\n                    //t - type\n                    //n - length\n                    getDeclaration(name, type, length) {\n                        const uniform = this;\n                        if (uniform.excludeFrom !== type) {\n                            if (\"array\" === uniform.type) return uniform.value[0].getDeclaration(name, type, uniform.value.length) + `\\nconst int ${name}_length = ${uniform.value.length};`;\n                            if (\"struct\" === uniform.type) {\n                                let name_no_prefix = name.replace(\"u_\", \"\");\n                                return name_no_prefix = \n                                  name_no_prefix.charAt(0).toUpperCase() + \n                                  name_no_prefix.slice(1), \n                                  `uniform struct ${name_no_prefix} \n                                  {\\n` + \n                                  Object.entries(uniform.value).map(([name, uniform]) => \n                                  uniform.getDeclaration(name, type)\n                                  .replace(/^uniform/, \"\"))\n                                  .join(\"\") \n                                  + `\\n} ${name}${length>0?`[${length}]`:\"\"};`\n                            }\n                            return `uniform ${uniform.type} ${name}${length>0?`[${length}]`:\"\"};`\n                        }\n                    }\n                }\n            },\n            PlaneGeometry: {\n                enumerable: !1,\n                value: class {\n                    constructor(width, height, n, i, orientation) {\n                      context.createBuffer(), this.attributes = {\n                            position: new _miniGl.Attribute({\n                                target: context.ARRAY_BUFFER,\n                                size: 3\n                            }),\n                            uv: new _miniGl.Attribute({\n                                target: context.ARRAY_BUFFER,\n                                size: 2\n                            }),\n                            uvNorm: new _miniGl.Attribute({\n                                target: context.ARRAY_BUFFER,\n                                size: 2\n                            }),\n                            index: new _miniGl.Attribute({\n                                target: context.ELEMENT_ARRAY_BUFFER,\n                                size: 3,\n                                type: context.UNSIGNED_SHORT\n                            })\n                        }, this.setTopology(n, i), this.setSize(width, height, orientation)\n                    }\n                    setTopology(e = 1, t = 1) {\n                        const n = this;\n                        n.xSegCount = e, n.ySegCount = t, n.vertexCount = (n.xSegCount + 1) * (n.ySegCount + 1), n.quadCount = n.xSegCount * n.ySegCount * 2, n.attributes.uv.values = new Float32Array(2 * n.vertexCount), n.attributes.uvNorm.values = new Float32Array(2 * n.vertexCount), n.attributes.index.values = new Uint16Array(3 * n.quadCount);\n                        for (let e = 0; e <= n.ySegCount; e++)\n                            for (let t = 0; t <= n.xSegCount; t++) {\n                                const i = e * (n.xSegCount + 1) + t;\n                                if (n.attributes.uv.values[2 * i] = t / n.xSegCount, n.attributes.uv.values[2 * i + 1] = 1 - e / n.ySegCount, n.attributes.uvNorm.values[2 * i] = t / n.xSegCount * 2 - 1, n.attributes.uvNorm.values[2 * i + 1] = 1 - e / n.ySegCount * 2, t < n.xSegCount && e < n.ySegCount) {\n                                    const s = e * n.xSegCount + t;\n                                    n.attributes.index.values[6 * s] = i, n.attributes.index.values[6 * s + 1] = i + 1 + n.xSegCount, n.attributes.index.values[6 * s + 2] = i + 1, n.attributes.index.values[6 * s + 3] = i + 1, n.attributes.index.values[6 * s + 4] = i + 1 + n.xSegCount, n.attributes.index.values[6 * s + 5] = i + 2 + n.xSegCount\n                                }\n                            }\n                        n.attributes.uv.update(), n.attributes.uvNorm.update(), n.attributes.index.update(), _miniGl.debug(\"Geometry.setTopology\", {\n                            uv: n.attributes.uv,\n                            uvNorm: n.attributes.uvNorm,\n                            index: n.attributes.index\n                        })\n                    }\n                    setSize(width = 1, height = 1, orientation = \"xz\") {\n                        const geometry = this;\n                        geometry.width = width,\n                        geometry.height = height,\n                        geometry.orientation = orientation,\n                        geometry.attributes.position.values && geometry.attributes.position.values.length === 3 * geometry.vertexCount \n                        || (geometry.attributes.position.values = new Float32Array(3 * geometry.vertexCount));\n                        const o = width / -2,\n                            r = height / -2,\n                            segment_width = width / geometry.xSegCount,\n                            segment_height = height / geometry.ySegCount;\n                        for (let yIndex= 0; yIndex <= geometry.ySegCount; yIndex++) {\n                            const t = r + yIndex * segment_height;\n                            for (let xIndex = 0; xIndex <= geometry.xSegCount; xIndex++) {\n                                const r = o + xIndex * segment_width,\n                                    l = yIndex * (geometry.xSegCount + 1) + xIndex;\n                                geometry.attributes.position.values[3 * l + \"xyz\".indexOf(orientation[0])] = r, \n                                geometry.attributes.position.values[3 * l + \"xyz\".indexOf(orientation[1])] = -t\n                            }\n                        }\n                        geometry.attributes.position.update(), _miniGl.debug(\"Geometry.setSize\", {\n                            position: geometry.attributes.position\n                        })\n                    }\n                }\n            },\n            Mesh: {\n                enumerable: !1,\n                value: class {\n                    constructor(geometry, material) {\n                        const mesh = this;\n                        mesh.geometry = geometry, mesh.material = material, mesh.wireframe = !1, mesh.attributeInstances = [], Object.entries(mesh.geometry.attributes).forEach(([e, attribute]) => {\n                            mesh.attributeInstances.push({\n                                attribute: attribute,\n                                location: attribute.attach(e, mesh.material.program)\n                            })\n                        }), _miniGl.meshes.push(mesh), _miniGl.debug(\"Mesh.constructor\", {\n                            mesh: mesh\n                        })\n                    }\n                    draw() {\n                      context.useProgram(this.material.program), this.material.uniformInstances.forEach(({\n                            uniform: e,\n                            location: t\n                        }) => e.update(t)), this.attributeInstances.forEach(({\n                            attribute: e,\n                            location: t\n                        }) => e.use(t)), context.drawElements(this.wireframe ? context.LINES : context.TRIANGLES, this.geometry.attributes.index.values.length, context.UNSIGNED_SHORT, 0)\n                    }\n                    remove() {\n                        _miniGl.meshes = _miniGl.meshes.filter(e => e != this)\n                    }\n                }\n            },\n            Attribute: {\n                enumerable: !1,\n                value: class {\n                    constructor(e) {\n                        this.type = context.FLOAT, this.normalized = !1, this.buffer = context.createBuffer(), Object.assign(this, e), this.update()\n                    }\n                    update() {\n                        void 0 !== this.values && (context.bindBuffer(this.target, this.buffer), context.bufferData(this.target, this.values, context.STATIC_DRAW))\n                    }\n                    attach(e, t) {\n                        const n = context.getAttribLocation(t, e);\n                        return this.target === context.ARRAY_BUFFER && (context.enableVertexAttribArray(n), context.vertexAttribPointer(n, this.size, this.type, this.normalized, 0, 0)), n\n                    }\n                    use(e) {\n                      context.bindBuffer(this.target, this.buffer), this.target === context.ARRAY_BUFFER && (context.enableVertexAttribArray(e), context.vertexAttribPointer(e, this.size, this.type, this.normalized, 0, 0))\n                    }\n                }\n            }\n        });\n        const a = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n        _miniGl.commonUniforms = {\n            projectionMatrix: new _miniGl.Uniform({\n                type: \"mat4\",\n                value: a\n            }),\n            modelViewMatrix: new _miniGl.Uniform({\n                type: \"mat4\",\n                value: a\n            }),\n            resolution: new _miniGl.Uniform({\n                type: \"vec2\",\n                value: [1, 1]\n            }),\n            aspectRatio: new _miniGl.Uniform({\n                type: \"float\",\n                value: 1\n            })\n        }\n    }\n    setSize(e = 640, t = 480) {\n        this.width = e, this.height = t, this.canvas.width = e, this.canvas.height = t, this.gl.viewport(0, 0, e, t), this.commonUniforms.resolution.value = [e, t], this.commonUniforms.aspectRatio.value = e / t, this.debug(\"MiniGL.setSize\", {\n            width: e,\n            height: t\n        })\n    }\n    //left, right, top, bottom, near, far\n    setOrthographicCamera(e = 0, t = 0, n = 0, i = -2e3, s = 2e3) {\n        this.commonUniforms.projectionMatrix.value = [2 / this.width, 0, 0, 0, 0, 2 / this.height, 0, 0, 0, 0, 2 / (i - s), 0, e, t, n, 1], this.debug(\"setOrthographicCamera\", this.commonUniforms.projectionMatrix.value)\n    }\n    render() {\n        this.gl.clearColor(0, 0, 0, 0), this.gl.clearDepth(1), this.meshes.forEach(e => e.draw())\n    }\n  }\n  \n  class Gradient {\n      constructor(...t) {\n          e(this, \"el\", void 0), e(this, \"cssVarRetries\", 0), e(this, \"maxCssVarRetries\", 200), e(this, \"angle\", 0), e(this, \"isLoadedClass\", !1), e(this, \"isScrolling\", !1), /*e(this, \"isStatic\", o.disableAmbientAnimations()),*/ e(this, \"scrollingTimeout\", void 0), e(this, \"scrollingRefreshDelay\", 200), e(this, \"isIntersecting\", !1), e(this, \"shaderFiles\", void 0), e(this, \"vertexShader\", void 0), e(this, \"sectionColors\", void 0), e(this, \"computedCanvasStyle\", void 0), e(this, \"conf\", void 0), e(this, \"uniforms\", void 0), e(this, \"t\", 1253106), e(this, \"last\", 0), e(this, \"width\", void 0), e(this, \"minWidth\", 1111), e(this, \"height\", 600), e(this, \"xSegCount\", void 0), e(this, \"ySegCount\", void 0), e(this, \"mesh\", void 0), e(this, \"material\", void 0), e(this, \"geometry\", void 0), e(this, \"minigl\", void 0), e(this, \"scrollObserver\", void 0), e(this, \"amp\", 320), e(this, \"seed\", 5), e(this, \"freqX\", 14e-5*1.5), e(this, \"freqY\", 29e-5*1.5), e(this, \"freqDelta\", 1e-5), e(this, \"activeColors\", [1, 1, 1, 1]), e(this, \"isMetaKey\", !1), e(this, \"isGradientLegendVisible\", !1), e(this, \"isMouseDown\", !1), e(this, \"handleScroll\", () => {\n              clearTimeout(this.scrollingTimeout), this.scrollingTimeout = setTimeout(this.handleScrollEnd, this.scrollingRefreshDelay), this.isGradientLegendVisible && this.hideGradientLegend(), this.conf.playing && (this.isScrolling = !0, this.pause())\n          }), e(this, \"handleScrollEnd\", () => {\n              this.isScrolling = !1, this.isIntersecting && this.play()\n          }), e(this, \"resize\", () => {\n              this.width = window.innerWidth, this.minigl.setSize(this.width, this.height), this.minigl.setOrthographicCamera(), this.xSegCount = Math.ceil(this.width * this.conf.density[0]), this.ySegCount = Math.ceil(this.height * this.conf.density[1]), this.mesh.geometry.setTopology(this.xSegCount, this.ySegCount), this.mesh.geometry.setSize(this.width, this.height), this.mesh.material.uniforms.u_shadow_power.value = this.width < 600 ? 5 : 6\n          }), e(this, \"handleMouseDown\", e => {\n              this.isGradientLegendVisible && (this.isMetaKey = e.metaKey, this.isMouseDown = !0, !1 === this.conf.playing && requestAnimationFrame(this.animate))\n          }), e(this, \"handleMouseUp\", () => {\n              this.isMouseDown = !1\n          }), e(this, \"animate\", e => {\n              if (!this.shouldSkipFrame(e) || this.isMouseDown) {\n                  if (this.t += Math.min(e - this.last, 1e3 / 15), this.last = e, this.isMouseDown) {\n                      let e = 160;\n                      this.isMetaKey && (e = -160), this.t += e\n                  }\n                  this.mesh.material.uniforms.u_time.value = this.t, this.minigl.render()\n    \n              }\n              if (0 !== this.last && this.isStatic) return this.minigl.render(), void this.disconnect();\n              (/*this.isIntersecting && */this.conf.playing || this.isMouseDown) && requestAnimationFrame(this.animate)\n          }), e(this, \"addIsLoadedClass\", () => {\n              /*this.isIntersecting && */!this.isLoadedClass && (this.isLoadedClass = !0, this.el.classList.add(\"isLoaded\"), setTimeout(() => {\n                  this.el.parentElement.classList.add(\"isLoaded\")\n              }, 3e3))\n          }), e(this, \"pause\", () => {\n              this.conf.playing = false\n          }), e(this, \"play\", () => {\n              requestAnimationFrame(this.animate), this.conf.playing = true\n          }), e(this,\"initGradient\", (selector) => {\n            this.el = document.querySelector(selector);\n            this.connect();\n            return this;\n          })\n      }\n      async connect() {\n          this.shaderFiles = {\n              vertex: \"varying vec3 v_color;\\n\\nvoid main() {\\n  float time = u_time * u_global.noiseSpeed;\\n\\n  vec2 noiseCoord = resolution * uvNorm * u_global.noiseFreq;\\n\\n  vec2 st = 1. - uvNorm.xy;\\n\\n  //\\n  // Tilting the plane\\n  //\\n\\n  // Front-to-back tilt\\n  float tilt = resolution.y / 2.0 * uvNorm.y;\\n\\n  // Left-to-right angle\\n  float incline = resolution.x * uvNorm.x / 2.0 * u_vertDeform.incline;\\n\\n  // Up-down shift to offset incline\\n  float offset = resolution.x / 2.0 * u_vertDeform.incline * mix(u_vertDeform.offsetBottom, u_vertDeform.offsetTop, uv.y);\\n\\n  //\\n  // Vertex noise\\n  //\\n\\n  float noise = snoise(vec3(\\n    noiseCoord.x * u_vertDeform.noiseFreq.x + time * u_vertDeform.noiseFlow,\\n    noiseCoord.y * u_vertDeform.noiseFreq.y,\\n    time * u_vertDeform.noiseSpeed + u_vertDeform.noiseSeed\\n  )) * u_vertDeform.noiseAmp;\\n\\n  // Fade noise to zero at edges\\n  noise *= 1.0 - pow(abs(uvNorm.y), 2.0);\\n\\n  // Clamp to 0\\n  noise = max(0.0, noise);\\n\\n  vec3 pos = vec3(\\n    position.x,\\n    position.y + tilt + incline + noise - offset,\\n    position.z\\n  );\\n\\n  //\\n  // Vertex color, to be passed to fragment shader\\n  //\\n\\n  if (u_active_colors[0] == 1.) {\\n    v_color = u_baseColor;\\n  }\\n\\n  for (int i = 0; i < u_waveLayers_length; i++) {\\n    if (u_active_colors[i + 1] == 1.) {\\n      WaveLayers layer = u_waveLayers[i];\\n\\n      float noise = smoothstep(\\n        layer.noiseFloor,\\n        layer.noiseCeil,\\n        snoise(vec3(\\n          noiseCoord.x * layer.noiseFreq.x + time * layer.noiseFlow,\\n          noiseCoord.y * layer.noiseFreq.y,\\n          time * layer.noiseSpeed + layer.noiseSeed\\n        )) / 2.0 + 0.5\\n      );\\n\\n      v_color = blendNormal(v_color, layer.color, pow(noise, 4.));\\n    }\\n  }\\n\\n  //\\n  // Finish\\n  //\\n\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\\n}\",\n              noise: \"//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex\\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : stegu\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//               https://github.com/stegu/webgl-noise\\n//\\n\\nvec3 mod289(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute(vec4 x) {\\n    return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise(vec3 v)\\n{\\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g;\\n  vec3 i1 = min( g.xyz, l.zxy );\\n  vec3 i2 = max( g.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289(i);\\n  vec4 p = permute( permute( permute(\\n            i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n          + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n          + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D.wyz - D.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1.xy,h.z);\\n  vec3 p3 = vec3(a1.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\\n                                dot(p2,x2), dot(p3,x3) ) );\\n}\",\n              blend: \"//\\n// https://github.com/jamieowen/glsl-blend\\n//\\n\\n// Normal\\n\\nvec3 blendNormal(vec3 base, vec3 blend) {\\n\\treturn blend;\\n}\\n\\nvec3 blendNormal(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendNormal(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Screen\\n\\nfloat blendScreen(float base, float blend) {\\n\\treturn 1.0-((1.0-base)*(1.0-blend));\\n}\\n\\nvec3 blendScreen(vec3 base, vec3 blend) {\\n\\treturn vec3(blendScreen(base.r,blend.r),blendScreen(base.g,blend.g),blendScreen(base.b,blend.b));\\n}\\n\\nvec3 blendScreen(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendScreen(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Multiply\\n\\nvec3 blendMultiply(vec3 base, vec3 blend) {\\n\\treturn base*blend;\\n}\\n\\nvec3 blendMultiply(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendMultiply(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Overlay\\n\\nfloat blendOverlay(float base, float blend) {\\n\\treturn base<0.5?(2.0*base*blend):(1.0-2.0*(1.0-base)*(1.0-blend));\\n}\\n\\nvec3 blendOverlay(vec3 base, vec3 blend) {\\n\\treturn vec3(blendOverlay(base.r,blend.r),blendOverlay(base.g,blend.g),blendOverlay(base.b,blend.b));\\n}\\n\\nvec3 blendOverlay(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendOverlay(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Hard light\\n\\nvec3 blendHardLight(vec3 base, vec3 blend) {\\n\\treturn blendOverlay(blend,base);\\n}\\n\\nvec3 blendHardLight(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendHardLight(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Soft light\\n\\nfloat blendSoftLight(float base, float blend) {\\n\\treturn (blend<0.5)?(2.0*base*blend+base*base*(1.0-2.0*blend)):(sqrt(base)*(2.0*blend-1.0)+2.0*base*(1.0-blend));\\n}\\n\\nvec3 blendSoftLight(vec3 base, vec3 blend) {\\n\\treturn vec3(blendSoftLight(base.r,blend.r),blendSoftLight(base.g,blend.g),blendSoftLight(base.b,blend.b));\\n}\\n\\nvec3 blendSoftLight(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendSoftLight(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Color dodge\\n\\nfloat blendColorDodge(float base, float blend) {\\n\\treturn (blend==1.0)?blend:min(base/(1.0-blend),1.0);\\n}\\n\\nvec3 blendColorDodge(vec3 base, vec3 blend) {\\n\\treturn vec3(blendColorDodge(base.r,blend.r),blendColorDodge(base.g,blend.g),blendColorDodge(base.b,blend.b));\\n}\\n\\nvec3 blendColorDodge(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendColorDodge(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Color burn\\n\\nfloat blendColorBurn(float base, float blend) {\\n\\treturn (blend==0.0)?blend:max((1.0-((1.0-base)/blend)),0.0);\\n}\\n\\nvec3 blendColorBurn(vec3 base, vec3 blend) {\\n\\treturn vec3(blendColorBurn(base.r,blend.r),blendColorBurn(base.g,blend.g),blendColorBurn(base.b,blend.b));\\n}\\n\\nvec3 blendColorBurn(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendColorBurn(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Vivid Light\\n\\nfloat blendVividLight(float base, float blend) {\\n\\treturn (blend<0.5)?blendColorBurn(base,(2.0*blend)):blendColorDodge(base,(2.0*(blend-0.5)));\\n}\\n\\nvec3 blendVividLight(vec3 base, vec3 blend) {\\n\\treturn vec3(blendVividLight(base.r,blend.r),blendVividLight(base.g,blend.g),blendVividLight(base.b,blend.b));\\n}\\n\\nvec3 blendVividLight(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendVividLight(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Lighten\\n\\nfloat blendLighten(float base, float blend) {\\n\\treturn max(blend,base);\\n}\\n\\nvec3 blendLighten(vec3 base, vec3 blend) {\\n\\treturn vec3(blendLighten(base.r,blend.r),blendLighten(base.g,blend.g),blendLighten(base.b,blend.b));\\n}\\n\\nvec3 blendLighten(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendLighten(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Linear burn\\n\\nfloat blendLinearBurn(float base, float blend) {\\n\\t// Note : Same implementation as BlendSubtractf\\n\\treturn max(base+blend-1.0,0.0);\\n}\\n\\nvec3 blendLinearBurn(vec3 base, vec3 blend) {\\n\\t// Note : Same implementation as BlendSubtract\\n\\treturn max(base+blend-vec3(1.0),vec3(0.0));\\n}\\n\\nvec3 blendLinearBurn(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendLinearBurn(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Linear dodge\\n\\nfloat blendLinearDodge(float base, float blend) {\\n\\t// Note : Same implementation as BlendAddf\\n\\treturn min(base+blend,1.0);\\n}\\n\\nvec3 blendLinearDodge(vec3 base, vec3 blend) {\\n\\t// Note : Same implementation as BlendAdd\\n\\treturn min(base+blend,vec3(1.0));\\n}\\n\\nvec3 blendLinearDodge(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendLinearDodge(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Linear light\\n\\nfloat blendLinearLight(float base, float blend) {\\n\\treturn blend<0.5?blendLinearBurn(base,(2.0*blend)):blendLinearDodge(base,(2.0*(blend-0.5)));\\n}\\n\\nvec3 blendLinearLight(vec3 base, vec3 blend) {\\n\\treturn vec3(blendLinearLight(base.r,blend.r),blendLinearLight(base.g,blend.g),blendLinearLight(base.b,blend.b));\\n}\\n\\nvec3 blendLinearLight(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendLinearLight(base, blend) * opacity + base * (1.0 - opacity));\\n}\",\n              fragment: \"varying vec3 v_color;\\n\\nvoid main() {\\n  vec3 color = v_color;\\n  if (u_darken_top == 1.0) {\\n    vec2 st = gl_FragCoord.xy/resolution.xy;\\n    color.g -= pow(st.y + sin(-12.0) * st.x, u_shadow_power) * 0.4;\\n  }\\n  gl_FragColor = vec4(color, 1.0);\\n}\"\n          },\n          this.conf = {\n              presetName: \"\",\n              wireframe: false,\n              density: [.06, .16],\n              zoom: 1,\n              rotation: 0,\n              playing: true\n          }, \n          document.querySelectorAll(\"canvas\").length < 1 ? console.log(\"DID NOT LOAD CANVAS\") : (\n            \n            this.minigl = new MiniGl(this.el, null, null, !0), \n            requestAnimationFrame(() => {\n                this.el && (this.computedCanvasStyle = getComputedStyle(this.el), this.waitForCssVars())\n            })\n            /*\n            this.scrollObserver = await s.create(.1, !1),\n            this.scrollObserver.observe(this.el),\n            this.scrollObserver.onSeparate(() => {\n                window.removeEventListener(\"scroll\", this.handleScroll), window.removeEventListener(\"mousedown\", this.handleMouseDown), window.removeEventListener(\"mouseup\", this.handleMouseUp), window.removeEventListener(\"keydown\", this.handleKeyDown), this.isIntersecting = !1, this.conf.playing && this.pause()\n            }), \n            this.scrollObserver.onIntersect(() => {\n                window.addEventListener(\"scroll\", this.handleScroll), window.addEventListener(\"mousedown\", this.handleMouseDown), window.addEventListener(\"mouseup\", this.handleMouseUp), window.addEventListener(\"keydown\", this.handleKeyDown), this.isIntersecting = !0, this.addIsLoadedClass(), this.play()\n            })*/\n    \n          )\n      }\n      disconnect() {\n          this.scrollObserver && (window.removeEventListener(\"scroll\", this.handleScroll), window.removeEventListener(\"mousedown\", this.handleMouseDown), window.removeEventListener(\"mouseup\", this.handleMouseUp), window.removeEventListener(\"keydown\", this.handleKeyDown), this.scrollObserver.disconnect()), window.removeEventListener(\"resize\", this.resize)\n      }\n      initMaterial() {\n          this.speed = this.computedCanvasStyle.getPropertyValue(\"--gradient-speed\");\n          this.uniforms = {\n              u_time: new this.minigl.Uniform({\n                  value: 0\n              }),\n              u_shadow_power: new this.minigl.Uniform({\n                  value: 5\n              }),\n              u_darken_top: new this.minigl.Uniform({\n                  value: \"\" === this.el.dataset.jsDarkenTop ? 1 : 0\n              }),\n              u_active_colors: new this.minigl.Uniform({\n                  value: this.activeColors,\n                  type: \"vec4\"\n              }),\n              u_global: new this.minigl.Uniform({\n                  value: {\n                      noiseFreq: new this.minigl.Uniform({\n                          value: [this.freqX, this.freqY],\n                          type: \"vec2\"\n                      }),\n                      noiseSpeed: new this.minigl.Uniform({\n                          value: this.speed\n                      })\n                  },\n                  type: \"struct\"\n              }),\n              u_vertDeform: new this.minigl.Uniform({\n                  value: {\n                      incline: new this.minigl.Uniform({\n                          value: Math.sin(this.angle) / Math.cos(this.angle)\n                      }),\n                      offsetTop: new this.minigl.Uniform({\n                          value: -.5\n                      }),\n                      offsetBottom: new this.minigl.Uniform({\n                          value: -.5\n                      }),\n                      noiseFreq: new this.minigl.Uniform({\n                          value: [3, 4],\n                          type: \"vec2\"\n                      }),\n                      noiseAmp: new this.minigl.Uniform({\n                          value: this.amp\n                      }),\n                      noiseSpeed: new this.minigl.Uniform({\n                          value: 10\n                      }),\n                      noiseFlow: new this.minigl.Uniform({\n                          value: 3\n                      }),\n                      noiseSeed: new this.minigl.Uniform({\n                          value: this.seed\n                      })\n                  },\n                  type: \"struct\",\n                  excludeFrom: \"fragment\"\n              }),\n              u_baseColor: new this.minigl.Uniform({\n                  value: this.sectionColors[0],\n                  type: \"vec3\",\n                  excludeFrom: \"fragment\"\n              }),\n              u_waveLayers: new this.minigl.Uniform({\n                  value: [],\n                  excludeFrom: \"fragment\",\n                  type: \"array\"\n              })\n          };\n          for (let e = 1; e < this.sectionColors.length; e += 1) this.uniforms.u_waveLayers.value.push(new this.minigl.Uniform({\n              value: {\n                  color: new this.minigl.Uniform({\n                      value: this.sectionColors[e],\n                      type: \"vec3\"\n                  }),\n                  noiseFreq: new this.minigl.Uniform({\n                      value: [2 + e / this.sectionColors.length, 3 + e / this.sectionColors.length],\n                      type: \"vec2\"\n                  }),\n                  noiseSpeed: new this.minigl.Uniform({\n                      value: 11 + .3 * e\n                  }),\n                  noiseFlow: new this.minigl.Uniform({\n                      value: 6.5 + .3 * e\n                  }),\n                  noiseSeed: new this.minigl.Uniform({\n                      value: this.seed + 10 * e\n                  }),\n                  noiseFloor: new this.minigl.Uniform({\n                      value: .1\n                  }),\n                  noiseCeil: new this.minigl.Uniform({\n                      value: .63 + .07 * e\n                  })\n              },\n              type: \"struct\"\n          }));\n          return this.vertexShader = [this.shaderFiles.noise, this.shaderFiles.blend, this.shaderFiles.vertex].join(\"\\n\\n\"), new this.minigl.Material(this.vertexShader, this.shaderFiles.fragment, this.uniforms)\n      }\n      initMesh() {\n          this.material = this.initMaterial(), this.geometry = new this.minigl.PlaneGeometry, this.mesh = new this.minigl.Mesh(this.geometry, this.material)\n      }\n      shouldSkipFrame(e) {\n          return !!window.document.hidden || (!this.conf.playing || (parseInt(e, 10) % 2 == 0 || void 0))\n      }\n      updateFrequency(e) {\n          this.freqX += e, this.freqY += e\n      }\n      toggleColor(index) {\n          this.activeColors[index] = 0 === this.activeColors[index] ? 1 : 0\n      }\n      showGradientLegend() {\n          this.width > this.minWidth && (this.isGradientLegendVisible = !0, document.body.classList.add(\"isGradientLegendVisible\"))\n      }\n      hideGradientLegend() {\n          this.isGradientLegendVisible = !1, document.body.classList.remove(\"isGradientLegendVisible\")\n      }\n      init() {\n          this.initGradientColors(), this.initMesh(), this.resize(), requestAnimationFrame(this.animate), window.addEventListener(\"resize\", this.resize)\n      }\n      /*\n      * Waiting for the css variables to become available, usually on page load before we can continue.\n      * Using default colors assigned below if no variables have been found after maxCssVarRetries\n      */\n      waitForCssVars() {\n          if (this.computedCanvasStyle && -1 !== this.computedCanvasStyle.getPropertyValue(\"--gradient-color-1\").indexOf(\"#\")) this.init(), this.addIsLoadedClass();\n          else {\n              if (this.cssVarRetries += 1, this.cssVarRetries > this.maxCssVarRetries) {\n                  return this.sectionColors = [16711680, 16711680, 16711935, 65280, 255],void this.init();\n              }\n              requestAnimationFrame(() => this.waitForCssVars())\n          }\n      }\n      /*\n      * Initializes the four section colors by retrieving them from css variables.\n      */\n      initGradientColors() {\n          this.sectionColors = [\"--gradient-color-1\", \"--gradient-color-2\", \"--gradient-color-3\", \"--gradient-color-4\"].map(cssPropertyName => {\n              let hex = this.computedCanvasStyle.getPropertyValue(cssPropertyName).trim();\n              //Check if shorthand hex value was used and double the length so the conversion in normalizeColor will work.\n              if (4 === hex.length) {\n                  const hexTemp = hex.substr(1).split(\"\").map(hexTemp => hexTemp + hexTemp).join(\"\");\n                  hex = `#${hexTemp}`\n              }\n              return hex && `0x${hex.substr(1)}`\n          }).filter(Boolean).map(normalizeColor)\n      }\n    }"],"names":["normalizeColor","hexCode","e","object","propertyName","val","Object","defineProperty","value","enumerable","configurable","writable","reduce","t","n","assign","MiniGl","constructor","canvas","width1","height1","debug","_miniGl","this","debug_output","document","location","search","toLowerCase","indexOf","gl","getContext","antialias","meshes","context","setSize","lastDebugMsg","e1","Date","console","log","toLocaleTimeString","Array","Math","max","length","join","from","arguments","slice","defineProperties","Material","vertexShaders","fragments","uniforms1","material","getShaderByType","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","error","getShaderInfoLog","getUniformVariableDeclarations","uniforms","entries","map","uniform","getDeclaration","uniformInstances","prefix","vertexSource","commonUniforms","Source","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","useProgram","attachUniforms","name1","forEach","name","i","push","getUniformLocation","Uniform","e2","typeFn","float","int","vec2","vec3","vec4","mat4","update","transpose","name2","uniform1","excludeFrom","name_no_prefix","replace","charAt","toUpperCase","PlaneGeometry","width","height","orientation","createBuffer","attributes","position","Attribute","target","ARRAY_BUFFER","size","uv","uvNorm","index","ELEMENT_ARRAY_BUFFER","UNSIGNED_SHORT","setTopology","e4","xSegCount","ySegCount","vertexCount","quadCount","values","Float32Array","Uint16Array","e3","t1","s","geometry","o","r","segment_width","segment_height","yIndex","xIndex","l","Mesh","mesh","wireframe","attributeInstances","e5","attribute","attach","draw","e6","e7","use","drawElements","LINES","TRIANGLES","remove","filter","e8","e9","FLOAT","normalized","buffer","bindBuffer","bufferData","STATIC_DRAW","e10","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","e11","a","projectionMatrix","modelViewMatrix","resolution","aspectRatio","e12","viewport","setOrthographicCamera","e13","render","clearColor","clearDepth","e14","Gradient","clearTimeout","scrollingTimeout","setTimeout","handleScrollEnd","scrollingRefreshDelay","isGradientLegendVisible","hideGradientLegend","conf","playing","isScrolling","pause","isIntersecting","play","window","innerWidth","minigl","ceil","density","u_shadow_power","e15","isMetaKey","metaKey","isMouseDown","requestAnimationFrame","animate","e16","shouldSkipFrame","min","last","e17","u_time","isStatic","disconnect","isLoadedClass","el","classList","add","parentElement","selector","querySelector","connect","async","shaderFiles","vertex","noise","blend","fragment","presetName","zoom","rotation","querySelectorAll","computedCanvasStyle","getComputedStyle","waitForCssVars","scrollObserver","removeEventListener","handleScroll","handleMouseDown","handleMouseUp","handleKeyDown","resize","initMaterial","speed","getPropertyValue","u_darken_top","dataset","jsDarkenTop","u_active_colors","activeColors","u_global","noiseFreq","freqX","freqY","noiseSpeed","u_vertDeform","incline","sin","angle","cos","offsetTop","offsetBottom","noiseAmp","amp","noiseFlow","noiseSeed","seed","u_baseColor","sectionColors","u_waveLayers","e18","color","noiseFloor","noiseCeil","initMesh","e19","hidden","parseInt","updateFrequency","e20","toggleColor","showGradientLegend","minWidth","body","init","initGradientColors","addEventListener","addIsLoadedClass","cssVarRetries","maxCssVarRetries","cssPropertyName","hex","trim","hexTemp1","substr","split","hexTemp","Boolean"],"version":3,"file":"index.ff27761a.js.map"}